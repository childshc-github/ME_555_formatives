This file contains info on testing hc340's Path Planning algorithm (path_planning).

path-step1
---------------------------------

ERRORS:
- 1st line isn't "$nodes"
Run ./path-step1 inputs/wfirst.txt
    You will see the output is:

First line in file isn't $nodes

    which is incorrect because the file needs a $nodes header.

- More than two headers
Run ./path-step1 inputs/wrepeat.txt
    You will see the output is:

Header $edges is incorrectly formatted

    which is incorrect because the file needs only 2 correct headers.

- Nonexistent file given
Run ./path-step1 inputs/fake.txt
    You will see the output is:

Couldn't open file

    which is incorrect because the file needs to exist.

- Incorrect formatting of decimal in coordinates
Run ./path-step1 inputs/wlone.txt
    You will see the output is:

Lone decimal present in $nodes

    which is incorrect because the inputs need to be valid doubles for conversion.

- Consecutive decimal points
Run ./path-step1 inputs/wdot.txt
    You will see the output is:

Lone decimal present in $nodes

    which is incorrect because the inputs need to be valid doubles for conversion.

- Incorrect number of file args (missing)
Run ./path-step1
    You will see the output is:

Incorrect number of files given

    which is incorrect because the program needs 1 file arg.

- Incorrect number of file args (too many)
Run ./path-step1 inputs/wfirst.txt inputs/wdot.txt
    You will see the output is:

Incorrect number of files given

    which is incorrect because the program needs 1 file arg.

- Non-numbers passed for $nodes
Run ./path-step1 inputs/wchars.txt
    You will see the output is:

Invalid entries in $nodes

    which is incorrect because the coordinates must make valid doubles.

- Non-numbers passed for $edges
Run ./path-step1 inputs/wedges.txt
    You will see the output is:

Invalid entries in $edges

    which is incorrect because the edges must be valid IDs.

- $nodes incorrect formatting (entries != 3)
Run ./path-step1 inputs/wtn.txt
    You will see the output is:

Incorrect formatting in $nodes line

    which is incorrect because the coordinates must be one x and one y

- $edges incorrect formatting (entries != 2)
Run ./path-step1 inputs/wte.txt
    You will see the output is:

Incorrect formatting in $edges line

    which is incorrect because there can only be 2 IDs per line.

- $edges header formatted incorrectly
Run ./path-step1 inputs/whead.txt
    You will see the output is:

Header $edges is incorrectly formatted

    which is incorrect because the file needs 1 line name $edges.

- No nodes, but has edges
Run ./path-step1 inputs/wedge.txt
    You will see the output is:

Edges given, but no nodes present

    which is incorrect because the file must have nodes to find edges.

- Incorrect negative sign placement
Run ./path-step1 inputs/wneg.txt
    You will see the output is:

Lone negative sign present in $nodes

    which is incorrect because the file must have correct formatting.



SUCCESS:
- Ordered list w/ correct format
Run ./path-step1 inputs/order.txt 
    You will see the output is:

(0,0) (2,0) (1,1) (5,5) 
0: 1,2 2,1.41421 
1: 0,2 2,1.41421 
2: 0,1.41421 1,1.41421 
3: no edges

    which is correct.

- Large number of nodes passed
Run ./path-step1 inputs/large.txt 
    You will see the output is:

(0,0) (2,0) (1,1) (5,5) (4,4) (5,5) (6,6) (7,7) (8,8) (9,9) (10,10) (11,11) (12,12) (13,13) (14,14) (15,15) 
0: 1,2 
1: 0,2 2,1.41421 
2: 1,1.41421 3,5.65685 
3: 2,5.65685 4,1.41421 
4: 3,1.41421 5,1.41421 
5: 4,1.41421 6,1.41421 
6: 5,1.41421 7,1.41421 
7: 6,1.41421 8,1.41421 
8: 7,1.41421 9,1.41421 
9: 8,1.41421 10,1.41421 
10: 9,1.41421 11,1.41421 
11: 10,1.41421 12,1.41421 
12: 11,1.41421 13,1.41421 
13: 12,1.41421 14,1.41421 
14: 13,1.41421 
15: no edges

    which is correct.


- Nodes given in unordered listed
Run ./path-step1 inputs/unorder.txt 
    You will see the output is:

    (0,0) (2,0) (1,1) (5,5) 
    0: 1,2 2,1.41421 
    1: 0,2 2,1.41421 
    2: 0,1.41421 1,1.41421 
    3: no edges

    which is correct.

- No nodes/edges
Run ./path-step1 inputs/no_entry.txt
    You will see the output is:



    which is correct because there are no edges or nodes.

- Overlapping nodes
Run ./path-step1 inputs/overlap.txt
    You will see the output is:

(0,0) (0,0) 
0: 1,0 
1: 0,0 

    which is correct.

- Negative x and y
Run ./path-step1 inputs/neg.txt
    You will see the output is:

(-1,0) (2,0) 
0: 1,3 
1: 0,3 

    which is correct.




path-step2
------------------------
ERRORS:
- Incorrect graph file format
Run ./path-step2 inputs/whead.txt 0 1
    You will see the output is:

Header $edges is incorrectly formatted

    which is incorrect because the file needs proper formatting.

- Too few args given
Run ./path-step2 inputs/whead.txt
    You will see the output is:

Incorrect number of args given

    which is incorrect because needs 3 args.

- Too many args given
Run ./path-step2 inputs/whead.txt 0 1 2
    You will see the output is:

Incorrect number of args given

    which is incorrect because needs 3 args.

- Nonexistent start node given
Run ./path-step2 inputs2/2.txt 8 2
    You will see the output is:

Given node doesn't exist in map

    which is incorrect because 8 isn't a node.

- Nonexistent end node given
Run ./path-step2 inputs2/2.txt 0 8
    You will see the output is:

Given node doesn't exist in map

    which is incorrect because 8 isn't a node.

- start node incorrect format
Run ./path-step2 inputs2/2.txt test 3
    You will see the output is:

Node argument has invalid chars

    which is incorrect because "test" isn't a valid node.

- passed end node incorrect format
Run ./path-step2 inputs2/2.txt 3 test
    You will see the output is:

Node argument has invalid chars

    which is incorrect because "test" isn't a valid node.

- no path exists (no edges)
Run ./path-step2 inputs2/wnph.txt 0 1
    You will see the output is:

No path possible - map has no edges

    which is incorrect because a path must exist.

- end node has no edges
Run ./path-step2 inputs2/wnone2.txt 0 2
    You will see the output is:

End node has no edges- no path exists

    which is incorrect because a path must exist.

- start node has no edges
Run ./path-step2 inputs2/wnone2.txt 0 2
    You will see the output is:

Start node has no edges- no path exists

    which is incorrect because a path must exist.

- no path exists (no connect to end node)
Run ./path-step2 inputs2/wnopath.txt 0 3
    You will see the output is:

Starting at node 0 and reaching for node 3
0, 1 : 2
No path exists

    which is incorrect because a path must exist.


SUCCESS:
- simple path (ordered input) w/ 2 same-distance answers
Run ./path-step2 inputs2/2.txt 0 3
    You will see the output is:

Starting at node 0 and reaching for node 3
0, 1 : 2
0, 2 : 2
0, 1, 3 : 4
0, 2, 3 : 4
Shortest path found: 
0, 1, 3 : 4

    which is the correct shortest path prioritizing low ID.

- simple path (unorder input- same values as previous) w/ 2 answers
Run ./path-step2 inputs2/uorder.txt 0 3
    You will see the output is:

Starting at node 0 and reaching for node 3
0, 1 : 2
0, 2 : 2
0, 1, 3 : 4
0, 2, 3 : 4
Shortest path found: 
0, 1, 3 : 4

    which is the correct shortest path prioritizing low ID.

- path is decreasing ID (3 -> 0)
Run ./path-step2 inputs2/uorder.txt 3 0
    You will see the output is:

Starting at node 3 and reaching for node 0
3, 1 : 2
3, 2 : 2
3, 1, 0 : 4
3, 2, 0 : 4
Shortest path found: 
3, 1, 0 : 4

    which is the correct shortest path.

- prioritize low ID for same length (four paths same)
Run ./path-step2 inputs2/four.txt 0 5
    You will see the output is:

Starting at node 0 and reaching for node 5
0, 1 : 1
0, 2 : 1
0, 3 : 1
0, 4 : 1
0, 1, 5 : 2
0, 2, 5 : 2
0, 3, 5 : 2
0, 4, 5 : 2
Shortest path found: 
0, 1, 5 : 2

    which is the correct shortest path.

- start node and end node are same
Run ./path-step2 inputs2/2.txt 0 0
    You will see the output is:

The start and end node are the same, so distance = 0

    which is the correct shortest path response.

- path all overlapping nodes (edge == 0)
Run ./path-step2 inputs2/overlap.txt 0 3
    You will see the output is:

Starting at node 0 and reaching for node 3
0, 1 : 0
0, 2 : 0
0, 1, 3 : 0
0, 2, 3 : 0
Shortest path found: 
0, 1, 3 : 0

    which is the correct shortest path.

- only 1 path exists
Run ./path-step2 inputs2/one.txt 0 2
    You will see the output is:

Starting at node 0 and reaching for node 2
0, 1 : 1
0, 1, 2 : 2
Shortest path found: 
0, 1, 2 : 2

    which is the correct shortest path.

- start or end node != ID of 0
Run ./path-step2 inputs2/2.txt 1 3
    You will see the output is:

Starting at node 1 and reaching for node 3
1, 0 : 2
1, 3 : 2
1, 0, 2 : 4
1, 0, 2, 3 : 6
Shortest path found: 
1, 3 : 2

    which is the correct shortest path.

- Complicated map (inspired page 507 All of Programming - Hilton & Bracy)
Run ./path-step2 inputs2/tricky.txt 0 3
    You will see the output is:

Starting at node 0 and reaching for node 3
0, 1 : 3
0, 5 : 4
0, 1, 2 : 6
0, 1, 4 : 10.6158
0, 5, 2 : 11.6158
0, 5, 4 : 7
0, 1, 2, 3 : 11.831
0, 5, 4, 3 : 13.4031
Shortest path found: 
0, 1, 2, 3 : 11.831

    which is the correct shortest path.




path-step3
-----------------------
ERRORS:
- Too few args given
Run ./path-step3
    You will see the output is:

Incorrect number of augments given

    which is incorrect because need 4 additional args.

- Too many args given
Run ./path-step3 1 2 3 4 5
    You will see the output is:

Incorrect number of augments given

    which is incorrect because need 4 additional args.

- nonexistent graph file given
Run ./path-step3 fake.txt inputs3/t146.txt 0 3
    You will see the output is:

Couldn't open file

    which is incorrect because need 4 valid input.

- grid map arg formatted incorrectly
Run ./path-step3 inputs3/trickyM.txt fake.txt 0 3
    You will see the output is:

Can't open obstacles file

    which is incorrect because need 4 valid input.

- start node doesn't exist
Run ./path-step3 inputs3/tester1G.txt inputs3/t157.txt 0 10
    You will see the output is:

Obstacle is blocking edge 1 -> 3
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 4 -> 6
Obstacle is blocking edge 5 -> 6
Obstacle is blocking edge 5 -> 7
Given node doesn't exist in map

    which is incorrect because 10 isn't a node.

- end node doesn't exist
Run ./path-step3 inputs3/tester1G.txt inputs3/t157.txt 10 0
    You will see the output is:

Obstacle is blocking edge 1 -> 3
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 4 -> 6
Obstacle is blocking edge 5 -> 6
Obstacle is blocking edge 5 -> 7
Given node doesn't exist in map

    which is incorrect because 10 isn't a node.

- start node incorrect format
Run ./path-step3 inputs3/tester1G.txt inputs3/t157.txt test 3
    You will see the output is:

Obstacle is blocking edge 1 -> 3
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 4 -> 6
Obstacle is blocking edge 5 -> 6
Obstacle is blocking edge 5 -> 7
Node argument has invalid chars

    which is incorrect because test isn't a valid node format.

- end node formatted incorrectly
Run ./path-step3 inputs3/tester1G.txt inputs3/t157.txt 0 test
    You will see the output is:

Obstacle is blocking edge 1 -> 3
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 4 -> 6
Obstacle is blocking edge 5 -> 6
Obstacle is blocking edge 5 -> 7
Node argument has invalid chars

    which is incorrect because test isn't a valid node format.

- obstacle arg incorrect header
Run ./path-step3 inputs3/tester1G.txt inputs3/badhead.txt 0 3
    You will see the output is:

First line (header) in obstacles input is not formatted correctly.

    which is incorrect because input must stard with $obstacles.

- obstacle arg blank line
Run ./path-step3 inputs3/tester1G.txt inputs3/blank.txt 0 3
    You will see the output is:

Only one node given in obstacles line

    which is incorrect because an empty row isn't valid node list.

- obstacle arg invalid type entry
Run ./path-step3 inputs3/tester1G.txt inputs3/it.txt 0 3
    You will see the output is:

Double space or invalid node type present in obstacles file

    which is incorrect because wrong format.

- only 1 obstacle ID given
Run ./path-step3 inputs3/tester1G.txt inputs3/wone.txt 0 3
    You will see the output is:

Only one node given in obstacles line

    which is incorrect because wrong format.

- obstacle ID line has repeat IDs
Run ./path-step3 inputs3/tester1G.txt inputs3/repeat.txt 0 3
    You will see the output is:

Repeat obstacle in input file

    which is incorrect because wrong format.

- no path after blocking all nodes included below


SUCCESS:
- Dij test (no obstructs in file)
Run ./path-step3 inputs2/2.txt inputs3/empty_obstacles.txt 0 3
    You will see the output is:

Starting at node 0 and reaching for node 3
0, 1 : 2
0, 2 : 2
0, 1, 3 : 4
0, 2, 3 : 4
Shortest path found: 
0, 1, 3 : 4

    which is correct.

- Obstruction deletes no edges
Run ./path-step3 inputs3/notconnectG.txt inputs3/notG.txt 0 1
    You will see the output is:

Starting at node 0 and reaching for node 1
0, 1 : 2
Shortest path found: 
0, 1 : 2

    which is correct.

- Special case (collinear) intersect
Run ./path-step3 inputs3/special.txt inputs3/s.txt 0 2
    You will see the output is:

Obstacle is blocking edge 0 -> 1
Starting at node 0 and reaching for node 2
0, 3 : 4
0, 3, 2 : 8
Shortest path found: 
0, 3, 2 : 8

    which is correct because the lowest ID path is obstructed.

- tricky path obstruction (make go longer path on right)
Run ./path-step3 inputs3/trickyM.txt inputs3/TM.txt 0 3
    You will see the output is:
    
Obstacle is blocking edge 1 -> 2
Starting at node 0 and reaching for node 3
0, 1 : 3
0, 5 : 4
0, 1, 4 : 10.6158
0, 5, 2 : 11.6158
0, 5, 4 : 7
0, 5, 4, 3 : 13.4031
0, 5, 2, 3 : 17.4467
Shortest path found: 
0, 5, 4, 3 : 13.4031

    which is correct because the longer path is only shortest.

DESCRIPTION OF TEST CASE TEMPLATES:
tester1G.txt and tester2G.txt are used as a baseline for the following step3 tests.
Both have the same path node structure: a 4x4 square with a left corner at (0, 0).
A diagram of the square node path is below:

2--3
|  | 
|  |
0--1


tester1G.txt: has an obstacle node structure like a cross intersecting the middle of the path
node square (node 5 is at (2,2)). This enables the blockage of 1, 2, 3, or all edges.

     6
     |
     |
  8--5--7
     |
     |
     4

tester2G.txt: has an obstacle node structure like a triangle that obstructs at angles. Node 4 is
at (2, -1).

  6----5
  \   /
   \ /
    4

Note: because these test cases don't include/activate all obstruction for each test,
this results in some prints statement stating a obstruction node has been obstructed.
While not true, the obstacle nodes are not connected to the path nodes. Therefore,
this does not affect accuracy and is simply the result of obstruction node 
selection in the template.

TEMPLATE CASES:
*tester1G*
- activate 4, 5
Run ./path-step3 inputs3/tester1G.txt inputs3/t145.txt 0 3

Obstacle is blocking edge 0 -> 1
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 4 -> 6
Obstacle is blocking edge 5 -> 6
Obstacle is blocking edge 5 -> 7
Starting at node 0 and reaching for node 3
0, 2 : 4
0, 2, 3 : 8
Shortest path found: 
0, 2, 3 : 8

- activate 5, 6
Run ./path-step3 inputs3/tester1G.txt inputs3/t156.txt 0 3

Obstacle is blocking edge 2 -> 3
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 4 -> 6
Obstacle is blocking edge 5 -> 6
Obstacle is blocking edge 5 -> 7
Starting at node 0 and reaching for node 3
0, 1 : 4
0, 2 : 4
0, 1, 3 : 8
Shortest path found: 
0, 1, 3 : 8

- activate 4, 6 (block all vert paths)
Run ./path-step3 inputs3/tester1G.txt inputs3/t146.txt 0 3

Obstacle is blocking edge 0 -> 1
Obstacle is blocking edge 2 -> 3
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 4 -> 6
Obstacle is blocking edge 5 -> 6
Obstacle is blocking edge 5 -> 7
Starting at node 0 and reaching for node 3
0, 2 : 4
No path exists

- activate 5, 7
Run ./path-step3 inputs3/tester1G.txt inputs3/t157.txt 0 3

Obstacle is blocking edge 1 -> 3
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 4 -> 6
Obstacle is blocking edge 5 -> 6
Obstacle is blocking edge 5 -> 7
Starting at node 0 and reaching for node 3
0, 1 : 4
0, 2 : 4
0, 2, 3 : 8
Shortest path found: 
0, 2, 3 : 8

- activate 5, 8
Run ./path-step3 inputs3/tester1G.txt inputs3/t158.txt 0 3

Obstacle is blocking edge 0 -> 2
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 4 -> 6
Obstacle is blocking edge 5 -> 6
Obstacle is blocking edge 5 -> 7
Starting at node 0 and reaching for node 3
0, 1 : 4
0, 1, 3 : 8
Shortest path found: 
0, 1, 3 : 8

- activate 7, 8 (block all horz paths)
Run ./path-step3 inputs3/tester1G.txt inputs3/t178.txt 0 3

Obstacle is blocking edge 0 -> 2
Obstacle is blocking edge 1 -> 3
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 4 -> 6
Obstacle is blocking edge 5 -> 6
Obstacle is blocking edge 5 -> 7
Starting at node 0 and reaching for node 3
0, 1 : 4
No path exists

- activate 4, 5, 6, 7, 8 (all)
Run ./path-step3 inputs3/tester1G.txt inputs3/tall.txt 0 3

Obstacle is blocking edge 0 -> 1
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 4 -> 6
Obstacle is blocking edge 5 -> 6
Obstacle is blocking edge 5 -> 7
Obstacle is blocking edge 2 -> 3
Obstacle is blocking edge 1 -> 3
Obstacle is blocking edge 0 -> 2
Start node has no edges- no path exists

*tester2G*
- activate 4, 6 (cut all start node edges)
Run ./path-step3 inputs3/tester2G.txt inputs3/t246.txt 0 3

Obstacle is blocking edge 0 -> 1
Obstacle is blocking edge 0 -> 2
Obstacle is blocking edge 4 -> 5
Start node has no edges- no path exists

- activate 4, 5
Run ./path-step3 inputs3/tester2G.txt inputs3/t245.txt 0 3

Obstacle is blocking edge 0 -> 1
Obstacle is blocking edge 1 -> 3
Obstacle is blocking edge 4 -> 5
Starting at node 0 and reaching for node 3
0, 2 : 4
0, 2, 3 : 8
Shortest path found: 
0, 2, 3 : 8

- activate 5, 6 (no path exists now)
Run ./path-step3 inputs3/tester2G.txt inputs3/t256.txt 0 3

Obstacle is blocking edge 0 -> 2
Obstacle is blocking edge 1 -> 3
Obstacle is blocking edge 4 -> 5
Starting at node 0 and reaching for node 3
0, 1 : 4
No path exists

- activate 4, 5, 6 (no path exists now)
Run ./path-step3 inputs3/tester2G.txt inputs3/t2456.txt 0 3

Obstacle is blocking edge 0 -> 1
Obstacle is blocking edge 1 -> 3
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 0 -> 2
Start node has no edges- no path exists




path-step4
----------------------
ERRORS:
- too few args given
Run ./path-step4 1 2 3
    You will see the output is:

Incorrect number of arguments given

    which is incorrect because an additional arg is needed.

- too many args given
Run ./path-step4 1 2 3 4 5 6
    You will see the output is:

Incorrect number of arguments given

    which is incorrect because an additional arg is needed.

- -a arg invalid length
Run ./path-step4 inputs3/tester1G.txt inputs3/empty_obstacles.txt 0 3 --a
    You will see the output is:

Incorrect format of A* request (too long).

    which is incorrect because the A* arg has an extra dash.

- -a arg invalid dash
Run ./path-step4 inputs3/tester1G.txt inputs3/empty_obstacles.txt 0 3 fa
    You will see the output is:

Incorrect format of A* request (bad dash).

    which is incorrect because the A* arg has a wrong dash.

- -a arg invalid a
Run ./path-step4 inputs3/tester1G.txt inputs3/empty_obstacles.txt 0 3 -f
    You will see the output is:

Incorrect format of A* request (bad a).

    which is incorrect because the A* arg has a wrong a.



SUCCESS:
- no -a arg (identical step 3, no obstacles)
Run ./path-step4 inputs3/tester1G.txt inputs3/empty_obstacles.txt 0 3
    You will see the output is:

Starting at node 0 and reaching for node 3
0, 1 : 4
0, 2 : 4
0, 1, 3 : 8
0, 2, 3 : 8
Shortest path found: 
0, 1, 3 : 8

    which is correct.

- no -a arg (idential step 3, with obstacles)
Run ./path-step4 inputs3/tester1G.txt inputs3/t157.txt 0 3
    You will see the output is:

Obstacle is blocking edge 1 -> 3
Obstacle is blocking edge 4 -> 5
Obstacle is blocking edge 4 -> 6
Obstacle is blocking edge 5 -> 6
Obstacle is blocking edge 5 -> 7
Starting at node 0 and reaching for node 3
0, 1 : 4
0, 2 : 4
0, 2, 3 : 8
Shortest path found: 
0, 2, 3 : 8

    which is correct.

- simple A* (no obs)
Run ./path-step4 inputs4/ftg.txt inputs3/empty_obstacles.txt 0 5 -a
    You will see the output is:

A* algorithm requested successfully
Starting at node 0 and reaching for node 5
0, 1 : 4 (current path distance), 5 (distance from end node)
0, 3 : 2 (current path distance), 5 (distance from end node)
0, 3, 2 : 5 (current path distance), 3.16228 (distance from end node)
0, 1, 5 : 9 (current path distance), inf (distance from end node)
0, 3, 2, 4 : 8 (current path distance), 1 (distance from end node)
0, 3, 2, 4, 5 : 9 (current path distance), inf (distance from end node)
Shortest path found: 
0, 1, 5 : 9

    which is correct.

- simple A* (with obs)
Run ./path-step4 inputs4/ftg2.txt inputs4/ftgo.txt 0 5 -a
    You will see the output is:

Obstacle is blocking edge 0 -> 1
A* algorithm requested successfully
Starting at node 0 and reaching for node 5
0, 3 : 2 (current path distance), 5 (distance from end node)
0, 3, 2 : 5 (current path distance), 3.16228 (distance from end node)
0, 3, 2, 4 : 8 (current path distance), 1 (distance from end node)
0, 3, 2, 4, 5 : 9 (current path distance), inf (distance from end node)
Shortest path found: 
0, 3, 2, 4, 5 : 9

    which is correct.

- A* with tricky path (no obs)
Run ./path-step4 inputs3/trickyM.txt inputs3/empty_obstacles.txt 0 3 -a
    You will see the output is:

A* algorithm requested successfully
Starting at node 0 and reaching for node 3
0, 1 : 3 (current path distance), 3.60555 (distance from end node)
0, 5 : 4 (current path distance), 4.47214 (distance from end node)
0, 1, 2 : 6 (current path distance), 5.83095 (distance from end node)
0, 1, 4 : 10.6158 (current path distance), 6.40312 (distance from end node)
0, 5, 2 : 11.6158 (current path distance), 5.83095 (distance from end node)
0, 5, 4 : 7 (current path distance), 6.40312 (distance from end node)
0, 1, 2, 3 : 11.831 (current path distance), inf (distance from end node)
0, 5, 4, 3 : 13.4031 (current path distance), inf (distance from end node)
Shortest path found: 
0, 1, 2, 3 : 11.831

    which is correct.

- A* with tricky path (obs)
Run ./path-step4 inputs3/trickyM.txt inputs3/TM.txt 0 3 -a
    You will see the output is:

Obstacle is blocking edge 1 -> 2
A* algorithm requested successfully
Starting at node 0 and reaching for node 3
0, 1 : 3 (current path distance), 3.60555 (distance from end node)
0, 5 : 4 (current path distance), 4.47214 (distance from end node)
0, 1, 4 : 10.6158 (current path distance), 6.40312 (distance from end node)
0, 5, 2 : 11.6158 (current path distance), 5.83095 (distance from end node)
0, 5, 4 : 7 (current path distance), 6.40312 (distance from end node)
0, 5, 4, 3 : 13.4031 (current path distance), inf (distance from end node)
0, 5, 2, 3 : 17.4467 (current path distance), inf (distance from end node)
Shortest path found: 
0, 5, 2, 3 : 17.4467

    which is correct.
