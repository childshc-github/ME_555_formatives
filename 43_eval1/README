For this evaluative assignment, you are going to write functions that read a
basketball roster and calculate game statistics. This assignment is broken down
into 4 steps, each of which involves writing a function to complete a
program. For each program, we have written the main function and code to read
from a file, and our code will call a function you will write. 

Your grade comprises the four steps and code quality with the following
breakdown:  

Step 1:        30
Step 2:        20
Step 3:        20
Step 4:        20
Code quality:  10
-----------------
Total:        100

Step 1
===========================================================================

Look in stats.h. You will see the definitions of the enum position_t, struct
player_t, and each of the functions you will write for this assignment. You
should not edit this file. 

For this step, you will write the function "parseLine", which takes a char *
line, representing a line of input from a file, and returns a player_t.

We have written code that will open and read a file (since you have not learned
how to do this yet). Our code will call your parseLine and pass in a string for
your code to parse and store in a player_t.

An example of an input file is given in simple_roster.txt. A valid line of input
is: 

name:number:position

where any characters before the first colon are the player's name, followed by
their number, another colon, and a letter corresponding to their position. The
string should not end in a newline character, but it will have a null
terminator. A valid line of input has a name of at least one character, a number
representing their player number, and a letter that must be one of G, C, or
F. If the name is too long to store in a player_t, an invalid number is read, or
the format of the line is otherwise incorrect, your program should give an
appropriate error message and call exit(EXIT_FAILURE).

Your code should properly initialize all fields in a player_t for the current
player in the roster. In addition to their name, number, and position, you
should initialize rebounds, points, and games to 0.

You can test this step by running "make printRoster" which will create a program
(using your parseLine and our code to read the file and print the contents of a
player_t), you can then run it like this:  

./printRoster roster.txt

You should check that it prints the information about each player correctly. You
should, of course, use valgrind and test on more cases than just those provided.

Once you get this working, be sure to commit to git before proceeding. 

Step 2
===========================================================================

For this step, you will write the function "addGame", which updates the
statistics for one player on the roster. Specifically, it takes roster, an array
of player_t's representing the roster's statistics so far; n_players, the number
of players in the roster; number, the player number; rebounds, the number of
rebounds the current player had in this game; and points, the number of points
the current player had in this game. This function should update the roster,
such that the player_t whose number matches 'number' has their statistics
updated. Their rebounds and points should be incremented by these numbers, and
their games should be incremented by 1. 

That is, if the roster is the one given in simple_roster.txt, the player number
is 02, rebounds are 3, and points are 5, Jaylen Blakes statistics should be
updated to be 2 rebounds, 5 points, and 1 game. If the player number is not in
the roster, it is an error, and your function should exit with a failure
status. 

You can test this step by running "make printStats" which will create a program
(using your addGame and our code to read the files and print the results), you
can then run it like this: 

./printStats simple_roster.txt simple_game1.txt simple_game2.txt

The output should be:

       Jaylen Blakes has  3 rebounds and  2 points in  2 games
      Stanley Borden has  0 rebounds and  0 points in  0 games
      Kale Catchings has 11 rebounds and 35 points in  2 games

As always, valgrind and test with more cases. Once you get this working, be sure
to commit to git before proceeding.  

Step 3
===========================================================================

For this step, you will write the function "printDoubleDouble", which prints out
which players had a double-double in that game. A double-double (in this
assignment) is where a player earns at least 10 rebounds and at least 10
points.* Specifically, it takes roster, an array of player_t's and n_players,
the number of players on the roster. It should print the name (followed by a
newline) of each player that has a double-double in that game. 

You can test this step by running "make printDoubleDouble" which will create a
program (using your printDoubleDouble and our code to read the files), you can
then run it like this: 

./printDoubleDouble simple_roster.txt simple_game2.txt

This example would print:

Players with a double-double this game:
Kale Catchings

As always, valgrind and test with more cases. Once you get this working, be sure
to commit to git before proceeding.  

*Double-double usually includes assists, steals, and blocked shots as well, but
 we didn't want a player_t to get unwieldy for this assignment.

Step 4
===========================================================================

For this step, you will write the function "printPosPoints", which calculates
the total points associated with players in each position and prints the
position with the most points. Specifically, it takes roster, an array of
player_t's and n_players, the number of players on the roster and prints its
output in the format: 

printf("Forwards had the most points with %u points\n", max_points);

(Or Centers, or Guards). If there is a tie, you can just print the first
position with the most points (in the order of the enum). 

You can test this step by running "make printPosPoints" which will create a
program (using your printPosPoints and our code to read the files), you can then
run it like this: 

./printPosPoints simple_roster.txt simple_game1.txt

The example prints:

Forwards had the most points with 15 points

As always, valgrind and test with more cases.

When you have completed this step and are satisfied with your testing, commit,
push, and submit your assignment for grading.  

Code Quality
===========================================================================

Your code will also be graded for its quality. Your grader will assess the
quality of the abstraction, naming, formatting, and documentation of your
code. For this assignment, make sure the functions you write do not get too
long, variable names are meaningful, formatting is standard (you can do this
automatically by saving in Emacs; otherwise, you should run clang-format on your
source code file), and that you document your work by adding a comment
describing each of the functions you write, as well as a comment if you write
anything complex or unusual.

Testing
===========================================================================

We will provide a "pregrader" you can use to run your own test cases to make
sure your code's output agrees with the output of our implementation. Create a
file named testcases.txt, and write your test cases in this format:  

#error
printRoster invalid.txt
printStats roster.txt

#success
printRoster roster.txt
printStats simple_roster.txt simple_game1.txt

That is, a section with the #error header containing error test cases, which
should give an appropriate error message and exit with a failure status. You are
free to make your own test files. 

The next section has a #success header and is followed by test cases that should
have a success status. For these the pregrader will check that your results
match ours. 

You may write as many test cases as you like, but you are limited to 20 seconds
of compute time by the pregrader. 

Before the deadline, when you do 'grade', the pregrader will run each test case
in your testcases.txt and compare your results to a reference
implementation. You may write as many test cases as you like, but you are
limited to 20 seconds of compute time by the pregrader.

We provide additional test files in /usr/local/intro_prog/bball_stats, but you
should also design your own test files. 

Reminders
===========================================================================

Before the hard deadline, your code will be graded by the pregrader that runs
your test cases. After the hard deadline, your code will be graded ONCE. You may
run "grade" as many times as you like, but the last commit after which you run
grade before the deadline will be your submission. Grading quality takes some
time, so expect your real grade to take about a week to come back.  

When testing, you should think of corner cases and design your own test
inputs. Your code should valgrind without errors on all cases. 

This is an INDIVIDUAL assignment. You are only allowed to communicate regarding
this assignment with an instructor or TA. 
