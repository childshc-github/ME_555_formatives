For this evaluative assignment, you will write a program to tell a random story
(kind of like Mad Libs) that generates a story, given a story template and a
list of words to choose from. 

For example, if you had a story like the one in story.txt:

Once upon a time, there was a _animal_ who lived in a very
_adjective_ _place_.

And some words to choose from like in words.txt:

animal:dragon
animal:walrus
animal:narwhal
place:cave
place:city
place:tree
adjective:peculiar

The program might produce:

Once upon a time, there was a walrus who lived in a very
peculiar cave.

The story template will be provided in an input file, where the "blanks" are the
category name preceded and followed by an underscore ("_"). Eventually, your
program should replace this blank with a word from the word list of the
appropriate category. The categories and word choices are provided in a separate
input file with the category name, colon (":"), then word. Your program should
print the story to stdout.  

You will write this program in four steps. The first step focuses on parsing the
story template. The second is reading categories and words, storing them into an
appropriate data structure. Step 3 combines the functionality of steps 1 and 2
to create a random story program. Step 4 adds the option of referencing
previously used words. 

Open provided.h, and you will see two struct definitions, one for a category_t
to store information about a category, such as "animal" or "verb" with an array
of words that will contain possible replacement words for that category. You
will also see a struct catarray_t for an array of category_t's and the
prototypes for two functions, which we provide.  

The function

const char * chooseWord(char * category, catarray_t * carr);

takes a string representing the category name and a catarray_t * "carr",
from which it will select a word in the requested category. If "carr" is
not NULL, this function returns a pointer to the string in "carr"--it does
not allocate new memory. If the requested category does not exist in
"carr", or the category does not have any words, the function will exit the
program with a failure status. If "carr" is NULL, the function will return
the string literal "cat", i.e. chooseWord("verb", NULL) would return
"cat". 

The function

void printWords(catarray_t * carr);

prints out the catarray_t * "carr" for the purpose of testing the contents
of that data structure.

The definitions of these functions are in provided.o, which the Makefile
will link with your code. You should not modify provided.h.

You MUST submit a Makefile that compiles the program for each step, and
each step must work as described. If you name your source code files like
we suggest, you will not need to modify the provided Makefile, but you
may if you wish.

Step 1
===========================================================================

Write the program story-step1, which takes one command line argument: the
name of the file to read the story template from. This program should parse
the story template by printing the story and replacing blanks with the word
"cat". Your code should call the provided function chooseWord, for this
step passing in NULL as the second argument to get return value "cat".

For example, for the input in story.txt, this program would print:

Once upon a time, there was a cat who lived in a very
cat cat.

For the format of the input file, each blank must begin and end with an
underscore '_'. If a blank begins, it must have a matching underscore on the
same line; otherwise, it is an error. If there is anything wrong with the input
file, you should print an appropriate error message and exit with a failure
status. 

As you plan your code for this step, consider how you can write reusable code
for the subsequent parts. You will want to write as much code as possible in
rand_story.c to avoid code duplication. Then you can write the prototypes of
functions in rand_story.h and include this in your story-step1.c.

Before you try to build your story-step1, you should do a few small things.
 1. The Makefile is currently set up to build all 4 steps. Find the line in it
    that says 
    PROGS=story-step1 story-step2 story-step3 story-step4
    and comment out steps 2-4
    PROGS=story-step1 # story-step2 story-step3 story-step4
    As you do future steps, uncomment the program for the step you are working
    on. 
 2. Create a .gitignore file in this directory that says
    story-step?
    rand_story.o
    
    This will cause Git to ignore the object file and binaries you are building
    (Or, you can do 'make clean' before adding to Git.)

Once you have tested this step to your satisfaction, add/commit/push/grade
before going on to the next step.

As before, the pregrader will read your testcases.txt file and use your
test cases. 

You should write your tests for this step like

#error
story-step1 broken.txt
#success
story-step1 mystory1.txt

Step 2
===========================================================================

Write the program story-step2, which takes one command line argument: the name
of the file with the categories and words. This program should read from the
file and store the words into a catarray_t and print them using the provided
function printWords. 

For example, if given the file words.txt, the output would be:

animal:
  dragon
  walrus
  narwhal
place:
  cave
  city
  tree
adjective:
  peculiar
  
Each line of the input file must have a colon (':'). The category name may be
any characters (except a colon), and the replacement word is everything
following the colon until (and not including) the newline. We place no other
restrictions on the words or the order the lines appear in the file. If the
input file does not have the right format, you should print an appropriate error
message and exit with a failure status. 

Again, consider how you can write as much of this code in rand_story.c in a
reusable way. 

Remember to go back into your Makefile and edit PROGS so it now includes
story-step2. 

Once you have tested this step to your satisfaction and ensured that step 1
still works, add/commit/push/grade before going on to the next step. 

Don't forget to write lots of good tests for the pregrader. They should start
with story-step2, like 

#success
story-step2 words.txt
story-step2 mytrickywords.txt

etc.

Step 3
===========================================================================

Write the program story-step3, which takes two command line arguments: the name
of the file with the categories/words and the name of the file for the story
template. This program should make use of the functions you wrote for step 1 and
step 2, but it should add the functionality to randomly choose a word from the
named category to replace each blank. 

For each blank you read, you should call chooseWord, which will return a random
choice from that category (since the second argument is not NULL). If a category
name is not a valid category name, the program should exit with a failure
status.

For example, if the story template is story.txt and the words file is
words.txt, the output would be:

Once upon a time, there was a walrus who lived in a very
peculiar cave.

Remember to update PROGS in your Makefile.

Once you have tested this step to your satisfaction and ensured that steps
1 and 2 still work, add/commit/push/grade before going on to the next step.

Don't forget to write lots of good tests for the pregrader.  They should
generally look like

#success
story-step3 words.txt story.txt
story-step3 trickywords.txt trickystory.txt

etc

Step 4
===========================================================================

Write the program story-step4, which takes two command line arguments: the name
of the file with the categories/words and the name of the file for the story 
template. This program should make use of the code you wrote for step 3, but it
should add the functionality to support references to previously used words.

If the category name is a valid integer of at least one, you should replace
the blank with a previously used word, counting backwards from the current
word, such that 1 refers to the immediately previous word.

For example, if the story template is story2.txt and the words file is
words.txt, the output would be:

Once upon a time, there was a narwhal. This narwhal lived in a very
peculiar cave. One day, it left its peculiar cave and met a narwhal.

Note that in this example, if "narwhal" is the word chosen for the first
_animal_ blank, the _1_ blank *must* be replaced with with "narwhal". The second
_animal_ blank might be replaced with "dragon", "walrus", or "narwhal", but the
random seed used in provided.o made chooseWord return "narwhal" both times.
Hint: You will want a way to keep track of words that have been used. The
struct category_t already has an array of words and the length of that
array. You could maintain a category_t that keeps track of used words.

Note that blanks such as _-1_ _0_ _2asdb_ are not inherently invalid.
They are not backreferences, but may be category names (so would be valid
iff such a category exists).

Remember, step 3 must still work as described after you implement this
functionality. The expected behavior for step 3 is if the blank *is* a valid
backreference for step 4 (such as _1_), it is a normal category: it is valid if
the category exists (there is a line in the word file like 1:wordforblank) and
invalid if the category does not. However, we will not test your step 3 with
blanks that are valid backreferences, so you do not have to implement this exact
expected behavior.

Remember to update PROGS in your Makefile.

Once you have tested this step to your satisfaction, git add/commit/push/grade,
to use the pregrader/submit your work. 

Don't forget to write testcases for this step, which should look generally like

#success
story-step4 words.txt story.txt
story-step4 trickywords.txt trickystory.txt

Code Quality
===========================================================================

Your code will also be graded for its quality. Your grader will assess the
quality of the abstraction, naming, formatting, and documentation of your
code. For this assignment, make sure the functions you write use good
abstraction, variable names are meaningful, formatting is standard (you can do
this automatically by saving in Emacs; otherwise, you should run clang-format on
your source code file), and that you document your work by adding a comment
describing each of the functions you write, as well as a comment if you write
anything complex or unusual. In addition, a submission for the assignment that
has excellent abstraction will have a short main function for each step, with
lots of code in rand_story.c that is reused between the steps.

Reminders
===========================================================================

Your code will be graded ONCE after a hard deadline. You may run "grade" as many
times as you like, but the last commit after which you run grade before the
deadline will be your submission. We have provided a "pre-grader," which will do
some basic tests, like making sure your code compiles and produced the expected
output for the provided test cases, as well as running YOUR test cases (which is
where most testing should happen). 

However, you should still be testing your code before you submit. 

This is an INDIVIDUAL assignment. You are only allowed to communicate regarding
this assignment with an instructor or TA. 
